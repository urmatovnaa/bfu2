"""Библиотека matplotlib содержит большой набор инструментов для двумерной графики.
Она проста в использовании и позволяет получать графики высокого качества.
В этом разделе мы рассмотрим наиболее распространенные типы диаграмм и различные настройки их отображения.
Модуль matplotlib.pyplot предоставляет процедурный интерфейс к (объектно-ориентированной) библиотеке matplotlib,
который во многом копирует инструменты пакета MATLAB. Инструменты модуля pyplot де-факто являются стандартным способом работы с библиотекой matplotlib*,
поэтому мы органичимся рассмотрением этого пакета."""

import numpy as np
import matplotlib
import matplotlib.pyplot as plt

# phi = np.linspace(0, 2.*np.pi, 100)
# plt.plot(phi, np.sin(phi))
# plt.plot(phi, np.cos(phi))
# plt.savefig('plot.png')

"""Мы использовали функцию plot, которой передали два параметра — списки значений по горизонтальной и вертикальной осям. 
При последовательных вызовах функции plot графики строятся в одних осях, при этом происходит автоматическое переключение цвета.
Строковый параметр
fmt = '[marker][line][color]'
функции plot позволяет задавать тип маркера, тип линии и цвет. Приведем несколько примеров:
"""

# x = np.linspace(0, 1, 100)
# f1 = 0.25 - (x - 0.5)**2
# f2 = x**3
# plt.plot(x, f1, ':b')    # пунктирная синяя линия
# plt.plot(x, f2, '--r')   # штрихованная красная линия
# plt.plot(x, f1+f2, 'k')  # черная непрерывная линия
# plt.savefig('plot2.png')

# rg = np.random.Generator(np.random.PCG64())
# plt.plot(rg.binomial(10, 0.3, 6), 'ob')  # синие круги
# plt.plot(rg.poisson(7, 6), 'vr')         # красные треугольники
# plt.plot(rg.integers(0, 10, 6), 'Dk')    # черные ромбы
# plt.savefig('plot3.png')

# Более тонкую настройку параметров можно выполнить, передавая различные именованные аргументы, например:
"""marker: str — тип маркера
markersize: float — размер маркера
linestyle: str — тип линии
linewidth: float — толщина линии
color: str — цвет"""

"""Диапазон значений осей
Задавать диапазон значений осей в matplotlib можно несколькими способами. Например, так:

pyplot.xlim([0, 200])  # диапазон горизонтальной оси от 0 до 200
pyplot.xlim([0, 1])    # диапазон вертикальной оси от 0 до 1
Размер шрифта
Размер и другие свойства шрифта, который используется в matplotlib по умолчанию, можно изменить с помощью объекта matplotlib.rcParams:

matplotlib.rcParams.update({'font.size': 14})
Объект matplotlib.rcParams хранит множество настроек, изменяя которые, можно управлять поведением по умолчанию. Смотрите подробнее в документации.

Подписи осей
Подписи к осям задаются следующим образом:

plt.xlabel('run number', fontsize=16)
plt.ylabel(r'average current ($\mu A$)', fontsize=16)
В подписях к осям (и вообще в любом тексте в matplotlib) можно использовать инструменты текстовой разметки TeX, позволяющие отрисовывать различные математические выражения. TeX-выражения должны быть внутри пары символов $, кроме того, их следует помещать в r-строки, чтобы избежать неправильной обработки.

Заголовок
Функция pyplot.title задает заголовок диаграммы. Применим наши новые знания:

plt.title('Заголовок')
"""

# задаем размер шрифта
# matplotlib.rcParams.update({'font.size': 12})
#
# rg = np.random.Generator(np.random.PCG64(11))
# x = np.arange(6)
# y = rg.poisson(149, x.size)
# yerr = [
#     0.7*np.sqrt(y),
#     1.2*np.sqrt(y)
# ]
# plt.errorbar(x, y, yerr=yerr, marker='o', linestyle='none',
#     ecolor='k', elinewidth=0.8, capsize=4, capthick=1)
#
# # добавляем подписи к осям и заголовок диаграммы
# plt.xlabel('run number', fontsize=16)
# plt.ylabel(r'average current ($\mu A$)', fontsize=16)
# plt.title(r'The $\alpha^\prime$ experiment. Season 2020-2021')
#
# # задаем диапазон значений оси y
# plt.ylim([0, 200])
# # оптимизируем поля и расположение объектов
# plt.tight_layout()
# plt.savefig('plot4.png')

"""В этом примере мы использовали функцию pyplot.tight_layout, которая автоматически подбирает параметры отображения так, 
чтобы различные элементы не пересекались.
При построении нескольких графиков в одних осях полезно добавлять легенду — пояснения к каждой линии. Следующий пример показывает, 
как это делается с помощью аргументов label и функции pyplot.legend:"""

# matplotlib.rcParams.update({'font.size': 12})
#
# x = np.linspace(0, 1, 100)
# f1 = 0.25 - (x - 0.5)**2
# f2 = x**3
#
# # указываем в аргументе label содержание легенды
# plt.plot(x, f1, ':b', label='1st component')
# plt.plot(x, f2, '--r', label='2nd component')
# plt.plot(x, f1+f2, 'k', label='total')
#
# plt.xlabel(r'$x$', fontsize=16)
# plt.ylabel(r'$f(x)$', fontsize=16)
#
# plt.xlim([0, 1])
# plt.ylim([0, 1])
#
# # выводим легенду
# plt.legend(fontsize=14)
#
# plt.tight_layout()

"""Сетка во многих случаях облегчает анализ графиков. Включить отображение сетки можно с помощью функции pyplot.grid. 
Аргумент axis этой функции имеет три возможных значения: x, y и both и определяет оси, вдоль которых будут проведены линии сетки. 
Управлять свойствами линии сетки можно с помощью именованных аргументов, которые мы рассматривали выше при обсуждении функции pyplot.plot.
В matplotlib поддерживается два типа сеток: основная и дополнительная. Выбор типа сетки выполняется с помощью аргумента which, 
который может принимать три значения: major, minor и both. По умолчанию используется основная сетка.
Линии сетки привязаны к отметкам на осях. Чтобы работать с дополнительной сеткой необходимо сначала включить вспомогательные отметки на осях 
(которые по умолчанию отключены и к которым привязаны линии дополнительной сетки) с помощью функции pyplot.minorticks_on. Приведем пример:"""


# matplotlib.rcParams.update({'font.size': 12})
#
# x = np.linspace(-1, 1, 250)
# plt.plot(x, x, label=r'$x$')
# plt.plot(x, x**2, label=r'$x^2$')
# plt.plot(x, x**3, label=r'$x^3$')
# plt.plot(x, np.cbrt(x), label=r'$x^{1/3}$')
# plt.legend(fontsize=16)
#
# # включаем дополнительные отметки на осях
# plt.minorticks_on()
# plt.xlabel(r'$x$', fontsize=16)
#
# plt.xlim([-1., 1.])
# plt.ylim([-1., 1.])
# # включаем основную сетку
# plt.grid(which='major')
# # включаем дополнительную сетку
# plt.grid(which='minor', linestyle=':')
# plt.tight_layout()

"""Гистограммы
Обратимся теперь к другим типам диаграмм. Функция pyplot.hist строит гистограмму по набору значений:"""

rg = np.random.Generator(np.random.PCG64(5))
data = rg.poisson(145, 10000)
plt.hist(data, bins=40)
plt.savefig('plot5.png')