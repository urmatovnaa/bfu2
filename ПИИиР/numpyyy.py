# numpy
"""Это библиотека с открытым исходным кодом, некогда отделившаяся от проекта SciPy. NumPy является наследником Numeric и NumArray.
Основан NumPy на библиотеке LAPAC, которая написана на Fortran. Не-python альтернативой для NumPy является Matlab.
В силу того, что NumPy базируется на Fortran это быстрая библиотека.
А в силу того, что поддерживает векторные операции с многомерными массивами — крайне удобная.
Кроме базового варианта (многомерные массивы в базовом варианте) NumPy включает в себя набор пакетов для решения специализированных задач, например:
numpy.linalg — реализует операции линейной алгебры (простое умножение векторов и матриц есть в базовом варианте);
numpy.random — реализует функции для работы со случайными величинами;
numpy.fft — реализует прямое и обратное преобразование Фурье.
Основным объектом NumPy является однородный многомерный массив.
Это таблица элементов (обычно чисел) одного типа, индексированных кортежем неотрицательных целых чисел. В NumPy измерения называются осями .
Например, массив координат точки в трехмерном пространстве [1, 2, 1] имеет одну ось. Эта ось имеет 3 элемента, поэтому мы говорим, что она имеет длину 3.
В приведенном ниже примере массив имеет 2 оси. Первая ось имеет длину 2, вторая ось имеет длину 3.
Класс массива NumPy называется ndarray . Он также известен под псевдонимом array . Обратите внимание, что numpy.array — это не то же самое,
что класс array.array стандартной библиотеки Python , который обрабатывает только одномерные массивы и предлагает меньшую функциональность.
Более важными атрибутами объекта ndarray являются:
ndarray.ndim количество осей (размеров)массива.
ndarray.shape размеры массива. Это кортеж целых чисел, указывающий размер массива в каждом измерении.
Для матрицы с n строками и m столбцами shape будет (n,m) . Таким образом, длина кортежа shape равна количеству осей ndim .
ndarray.size общее количество элементов массива. Это равно произведению элементов shape .
ndarray.dtype объект,описывающий тип элементов массива.Можно создавать или указывать dtype,используя стандартные типы Python.
Кроме того,NumPy предоставляет собственные типы.numpy.int32,numpy.int16 и numpy.float64-вот некоторые примеры.
ndarray.itemsize размер в байтах каждого элемента массива. Например, массив элементов типа float64 имеет itemsize 8 (= 64/8 ),
а массив элементов типа complex32 имеет itemsize 4 (= 32/8 ). Это эквивалент ndarray.dtype.itemsize .
ndarray.data буфер,содержащий фактические элементы массива.Обычно нам не нужно использовать этот атрибут,потому
что мы будем обращаться к элементам массива,используя средства индексации."""
import numpy as np
from numpy import pi

a = np.arange(15).reshape(3, 5)   # генерирует массив из 15 чисел (0,15), потом создает 3 массива в массиве по 5 элементов
print(a)
print(a.shape)
print(a.ndim)    # количество осей (размеров)массива.
print(a.dtype.name)
print(a.itemsize)
print(a.size)
type(a)

b = np.array([6, 7, 8])
print(b)
type(b)

a = np.array([2, 3, 4])
b = np.array([1.2, 3.5, 5.1])
print(b)
"""Функция zeros создает массив, полный нулей, функция ones создает массив, полный единиц,
 а функция empty создает массив, начальное содержимое которого является случайным и зависит от состояния памяти. 
 По умолчанию dtype созданного массива - float64 , но его можно указать с помощью аргумента ключевого слова dtype ."""
print(np.zeros((3, 4)))
print(np.ones((2, 3, 4), dtype=np.int16))
print(np.empty((2, 3)))

"""Для создания последовательностей чисел NumPy предоставляет функцию arange , которая аналогична встроенному range Python , но возвращает массив."""
np.arange(10, 30, 5)
np.arange(0, 2, 0.3)  # it accepts float arguments

"""Когда arange используется с аргументами с плавающей запятой, обычно невозможно предсказать количество полученных элементов 
из-за конечной точности с плавающей запятой. По этой причине обычно лучше использовать функцию linspace , 
которая принимает в качестве аргумента количество элементов, которое мы хотим, вместо шага:"""
n = np.linspace(0, 2, 9)                   # 9 числа от 0 до 2
print(n)

x = np.linspace(0, 2 * pi, 100)        # полезно для оценки функции во многих точках
f = np.sin(x)

print(f)

# БАЗОВЫЕ ОПЕРАЦИИ
a = np.array([20, 30, 40, 50])
b = np.arange(4)
print(b)
c = a - b
print(c)
d = b**2
e = 10 * np.sin(a)
print(d)
print(e)

"""По умолчанию эти операции применяются к массиву, как если бы он был списком чисел, независимо от его формы. 
Однако, указав параметр axis вы можете применить операцию вдоль указанной оси массива:"""

b = np.arange(12).reshape(3, 4)
print(b)

print(b.sum(axis=0))     # сумма каждого столбца
print(b.min(axis=1))     # мин каждой строки

print(b.cumsum(axis=1))  # совокупная сумма по каждой строке