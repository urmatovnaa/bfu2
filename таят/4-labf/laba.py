def cyk_algorithm(string):
    n = len(string)

    # Инициализация таблицы размером n x n, где table[i][j] хранит множество нетерминалов
    table = [[set() for _ in range(n)] for _ in range(n)]

    # Шаг 1: Заполнение таблицы для одиночных символов
    for i, char in enumerate(string):
        if char == '+':
            table[i][i].add('D')  # D -> '+'
        elif char == 'a':
            table[i][i].add('F')  # F -> 'a'
        elif char == 'b':
            table[i][i].add('B')  # B -> 'b'
        elif char == 'c':
            table[i][i].add('C')  # C -> 'c'

    # Шаг 2: Заполнение таблицы для подстрок длиной 2 и больше
    for length in range(2, n + 1):  # длина подстроки от 2 до n
        for start in range(n - length + 1):  # начальная позиция подстроки
            end = start + length - 1  # конечная позиция подстроки
            for split in range(start, end):  # разбиение на две части
                # Применение правил грамматики для каждой пары
                if 'G' in table[start][split] and 'B' in table[split + 1][end]:
                    table[start][end].add('L')  # L -> GB
                if 'H' in table[start][split] and 'K' in table[split + 1][end]:
                    table[start][end].add('M')  # M -> HK
                if 'B' in table[start][split] and 'A' in table[split + 1][end]:
                    table[start][end].add('H')  # H -> BA
                if 'D' in table[start][split] and 'F' in table[split + 1][end]:
                    table[start][end].add('G')  # G -> DF
                if 'C' in table[start][split] and 'C' in table[split + 1][end]:
                    table[start][end].add('K')  # K -> CC
                if 'H' in table[start][split] and 'C' in table[split + 1][end]:
                    table[start][end].add('A')  # A -> HC

    # Шаг 3: Проверка, может ли строка быть порождена грамматикой
    return 'S' in table[0][n - 1]  # Начальный символ 'S' в таблице для всей строки


# Тестируем алгоритм
string = "+abbcc"
result = cyk_algorithm(string)

# Выводим результат
print("The string is generated by the grammar." if result else "The string is not generated by the grammar.")
